using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace GreatOutdoors.DataAccessLayer
{
    public class ProductDAL
    {
        TeamAEntities entities = new TeamAEntities();

        /// <summary>
        /// Adds new product to Products collection.
        /// </summary>
        /// <param name="newProduct">Contains the product details to be added.</param>
        /// <returns>Determinates whether the new product is added.</returns>
        public  bool AddProductDAL(Product newProduct)
        {
            bool productAdded = false;
            try
            {
                newProduct.ProductID = Guid.NewGuid();
                entities.AddProduct(newProduct.ProductID, newProduct.Name, newProduct.Category, newProduct.Stock,
                   newProduct.Size, newProduct.Colour, newProduct.TechnicalSpecifications, newProduct.CostPrice,
                   newProduct.SellingPrice,newProduct.DiscountPercentage);
                productAdded = true;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            return productAdded;
        }

        /// <summary>
        /// Gets all products from the collection.
        /// </summary>
        /// <returns>Returns list of all products.</returns>
        public  List<Product> GetAllProductsDAL()
        {
            List<Product> products = new List<Product>();
            try
            {
                products = entities.Products.ToList();
            }
            catch (Exception ex)
            {
                throw ex;
            }

            return products;
        }

        /// <summary>
        /// Gets product based on ProductID.
        /// </summary>
        /// <param name="searchProductID">Represents ProductID to search.</param>
        /// <returns>Returns Product object.</returns>
        public  List<Product> GetProductByProductIDDAL(Guid searchProductID)
        {
            List<Product> products = new List<Product>();
            try
            {
                products = entities.GetProductByProductID(searchProductID).ToList();
            }
            catch (Exception ex)
            {
                throw ex;
            }

            return products;
        }

        /// <summary>
        /// Gets product based on ProductName.
        /// </summary>
        /// <param name="productName">Represents ProductName to search.</param>
        /// <returns>Returns Product object.</returns>
        public  List<Product> GetProductByNameDAL(string productName)
        {
            List<Product> products = new List<Product>();
            try
            {
                products = entities.GetProductByName(productName).ToList();
            }
            catch (Exception ex)
            {
                throw ex;
            }

            return products;
        }

        /// <summary>
        /// Gets product based on email.
        /// </summary>
        /// <param name="CategoryName">Represents Product's Category Name.</param>
        /// <returns>Returns Product object.</returns>
        public  List<Product> GetProductsByCategoryDAL(string categoryName)
        {
            List<Product> products = new List<Product>();
            try
            {
                products = entities.GetProductsByCategory(categoryName).ToList();
            }
            catch (Exception ex)
            {
                throw ex;
            }

            return products;
        }



        /// <summary>
        /// Updates product based on ProductID.
        /// </summary>
        /// <param name="updateProduct">Represents Product details including ProductID, ProductName etc.</param>
        /// <returns>Determinates whether the existing product is updated.</returns>
        public  bool UpdateProductDetailsDAL(Product updateProduct)
        {
            bool productUpdated = false;
            try
            {
                //Find Product based on ProductID
                Product matchingProduct = GetProductByProductIDDAL(updateProduct.ProductID)[0];

                if (matchingProduct != null)
                {
                    //Update product details
                    entities.UpdateProductDetails(updateProduct.ProductID, updateProduct.TechnicalSpecifications,
                        updateProduct.CostPrice,updateProduct.SellingPrice);
                    productUpdated = true;
                }
            }
            catch (Exception)
            {
                throw;
            }
            return productUpdated;
        }

        /// <summary>
        /// Update product stock.
        /// </summary>
        /// <param name="updateProduct">Represents Product details including ProductID, ProductName etc.</param>
        /// <returns>Determinates whether the existing product is updated.</returns>

        public  bool UpdateProductStockDAL(Product updateProduct)
        {
            bool stockUpdated = false;
            try
            {
                //Find Product based on ProductID
                Product matchingProduct = GetProductByProductIDDAL(updateProduct.ProductID)[0];

                if (matchingProduct != null)
                {
                    //Update product details
                    entities.UpdateProductStock(updateProduct.ProductID, updateProduct.Stock);

                    stockUpdated = true;
                }
            }
            catch (Exception)
            {
                throw;
            }
            return stockUpdated;
        }

        /// <summary>
        /// Update product discount.
        /// </summary>
        /// <param name="updateProduct">Represents Product details including ProductID, ProductName etc.</param>
        /// <returns>Determinates whether the existing product is updated.</returns>

        public bool UpdateProductDiscountDAL(Product updateProduct)
        {
            bool stockUpdated = false;
            try
            {
                //Find Product based on ProductID
                Product matchingProduct = GetProductByProductIDDAL(updateProduct.ProductID)[0];

                if (matchingProduct != null)
                {
                    //Update product details
                    entities.UpdateProductDiscount(updateProduct.ProductID, updateProduct.DiscountPercentage);

                    stockUpdated = true;
                }
            }
            catch (Exception)
            {
                throw;
            }
            return stockUpdated;
        }

        /// <summary>
        /// Deletes product based on ProductID.
        /// </summary>
        /// <param name="deleteProductID">Represents ProductID to delete.</param>
        /// <returns>Determinates whether the existing product is deleted.</returns>
        public  bool DeleteProductDAL(Guid deleteProductID)
        {
            bool productDeleted = false;
            try
            {


                if (deleteProductID != null)
                {
                    //Delete Product from the collection
                    entities.DeleteProduct(deleteProductID);
                    entities.SaveChanges();
                    productDeleted = true;
                }
            }
            catch (Exception)
            {
                throw;
            }
            return productDeleted;
        }


    }
}
