using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Capgemini.GreatOutdoors.Contracts.DALContracts;
using Capgemini.GreatOutdoors.Entities;
using Capgemini.GreatOutdoors.Exceptions;
using Capgemini.GreatOutdoors.Helpers;

namespace Capgemini.GreatOutdoors.DataAccessLayer
{
    /// <summary>
    /// Contains data access layer methods for inserting, updating, deleting SalesPersons from SalesPersons collection.
    /// </summary>
    public class SalesPersonDAL : SalesPersonDALBase, IDisposable
    {

        TeamAEntities entities = new TeamAEntities();
        /// <summary>
        /// Adds new SalesPerson to SalesPersons collection.
        /// </summary>
        /// <param name="newSalesPerson">Contains the SalesPerson details to be added.</param>
        /// <returns>Determinates whether the new SalesPerson is added.</returns>
        public override bool AddSalesPersonDAL(SalesPerson newSalesPerson)
        {
            bool SalesPersonAdded = false;
            try
            {
                newSalesPerson.SalesPersonID = Guid.NewGuid();
                newSalesPerson.LastModifiedDateTime = DateTime.Now;
                entities.AddSalesPerson(newSalesPerson.SalesPersonID, newSalesPerson.SalesPersonName, newSalesPerson.AddressLine1,
                    newSalesPerson.AddressLine2, newSalesPerson.BirthDate, newSalesPerson.City, newSalesPerson.Email,
                    newSalesPerson.JoiningDate, newSalesPerson.LastModifiedDateTime, newSalesPerson.Password, newSalesPerson.Pincode,
                    newSalesPerson.SalesPersonBonus, newSalesPerson.SalesPersonMobile, newSalesPerson.SalesPersonSalary, newSalesPerson.SalesPersonTarget);
                SalesPersonAdded = true;
            }
            catch (Exception)
            {
                throw;
            }
            return SalesPersonAdded;
        }

        /// <summary>
        /// Gets all SalesPersons from the collection.
        /// </summary>
        /// <returns>Returns list of all SalesPersons.</returns>
        public override List<SalesPerson> GetAllSalesPersonsDAL()
        {
            List<SalesPerson> salesPeople = new List<SalesPerson>();
            try
            {
                salesPeople = entities.GetAllSalesPersons().ToList();
            }
            catch (GreatOutdoorsException ex)
            {
                throw new GreatOutdoorsException(ex.Message);
            }

            return salesPeople;
        }

        /// <summary>
        /// Gets SalesPerson based on SalesPersonID.
        /// </summary>
        /// <param name="searchSalesPersonID">Represents SalesPersonID to search.</param>
        /// <returns>Returns SalesPerson object.</returns>
        public override SalesPerson GetSalesPersonBySalesPersonIDDAL(Guid searchSalesPersonID)
        {
            List<SalesPerson> salesPeople = new List<SalesPerson>();
            try
            {
                salesPeople = entities.GetSalesPersonBySalesPersonID(searchSalesPersonID).ToList();
            }
            catch (GreatOutdoorsException ex)
            {
                throw new GreatOutdoorsException(ex.Message);
            }

            return salesPeople[0];
        }

        /// <summary>
        /// Gets SalesPerson based on SalesPersonName.
        /// </summary>
        /// <param name="SalesPersonName">Represents SalesPersonName to search.</param>
        /// <returns>Returns SalesPerson object.</returns>
        public override List<SalesPerson> GetSalesPersonsByNameDAL(string SalesPersonName)
        {
            List<SalesPerson> salesPeople = new List<SalesPerson>();
            try
            {
                salesPeople = entities.GetSalesPersonsByName(SalesPersonName).ToList();
            }
            catch (GreatOutdoorsException ex)
            {
                throw new GreatOutdoorsException(ex.Message);
            }

            return salesPeople;
        }

        /// <summary>
        /// Gets SalesPerson based on email.
        /// </summary>
        /// <param name="email">Represents SalesPerson's Email Address.</param>
        /// <returns>Returns SalesPerson object.</returns>
        public override SalesPerson GetSalesPersonByEmailDAL(string email)
        {
            List<SalesPerson> salesPeople = new List<SalesPerson>();
            try
            {
                salesPeople = entities.GetSalesPersonByEmail(email).ToList();
            }
            catch (GreatOutdoorsException ex)
            {
                throw new GreatOutdoorsException(ex.Message);
            }

            return salesPeople[0];
        }

        /// <summary>
        /// Gets SalesPerson based on Email and Password.
        /// </summary>
        /// <param name="email">Represents SalesPerson's Email Address.</param>
        /// <param name="password">Represents SalesPerson's Password.</param>
        /// <returns>Returns SalesPerson object.</returns>
        public override SalesPerson GetSalesPersonByEmailAndPasswordDAL(string email, string password)
        {
            List<SalesPerson> salesPeople = new List<SalesPerson>();
            try
            {
                salesPeople = entities.GetSalesPersonByEmailAndPassword(email,password).ToList();
            }
            catch (GreatOutdoorsException ex)
            {
                throw new GreatOutdoorsException(ex.Message);
            }

            return salesPeople[0];
        }

        /// <summary>
        /// Updates SalesPerson based on SalesPersonID.
        /// </summary>
        /// <param name="updateSalesPerson">Represents SalesPerson details including SalesPersonID, SalesPersonName etc.</param>
        /// <returns>Determinates whether the existing SalesPerson is updated.</returns>
        public override bool UpdateSalesPersonDAL(SalesPerson updateSalesPerson)
        {
            bool SalesPersonUpdated = false;
            try
            {
                //Find SalesPerson based on SalesPersonID
                SalesPerson matchingSalesPerson = GetSalesPersonBySalesPersonIDDAL(updateSalesPerson.SalesPersonID);

                if (matchingSalesPerson != null)
                {
                    //Update SalesPerson details
                    updateSalesPerson.LastModifiedDateTime = DateTime.Now;
                    entities.AddSalesPerson(updateSalesPerson.SalesPersonID, updateSalesPerson.SalesPersonName, updateSalesPerson.AddressLine1,
                    updateSalesPerson.AddressLine2, updateSalesPerson.BirthDate, updateSalesPerson.City, updateSalesPerson.Email,
                    updateSalesPerson.JoiningDate, updateSalesPerson.LastModifiedDateTime, updateSalesPerson.Password, updateSalesPerson.Pincode,
                    updateSalesPerson.SalesPersonBonus, updateSalesPerson.SalesPersonMobile, updateSalesPerson.SalesPersonSalary, updateSalesPerson.SalesPersonTarget);

                    SalesPersonUpdated = true;
                }
            }
            catch (Exception)
            {
                throw;
            }
            return SalesPersonUpdated;
        }

        /// <summary>
        /// Deletes SalesPerson based on SalesPersonID.
        /// </summary>
        /// <param name="deleteSalesPersonID">Represents SalesPersonID to delete.</param>
        /// <returns>Determinates whether the existing SalesPerson is updated.</returns>
        public override bool DeleteSalesPersonDAL(Guid deleteSalesPersonID)
        {
            bool SalesPersonDeleted = false;
            try
            {
              
                if (deleteSalesPersonID != null)
                {
                    //Delete SalesPerson from the collection
                    entities.Delete(deleteSalesPersonID);
                    entities.SaveChanges();
                    SalesPersonDeleted = true;
                }
            }
            catch (Exception)
            {
                throw;
            }
            return SalesPersonDeleted;
        }

        /// <summary>
        /// Updates SalesPerson's password based on SalesPersonID.
        /// </summary>
        /// <param name="updateSalesPerson">Represents SalesPerson details including SalesPersonID, Password.</param>
        /// <returns>Determinates whether the existing SalesPerson's password is updated.</returns>
        public override bool UpdateSalesPersonPasswordDAL(SalesPerson updateSalesPerson)
        {
            bool passwordUpdated = false;
            try
            {
                //Find SalesPerson based on SalesPersonID
                SalesPerson matchingSalesPerson = GetSalesPersonBySalesPersonIDDAL(updateSalesPerson.SalesPersonID);

                if (matchingSalesPerson != null)
                {
                    //Update SalesPerson details
                    updateSalesPerson.LastModifiedDateTime = DateTime.Now;
                    entities.AddSalesPerson(updateSalesPerson.SalesPersonID, updateSalesPerson.SalesPersonName, updateSalesPerson.AddressLine1,
                    updateSalesPerson.AddressLine2, updateSalesPerson.BirthDate, updateSalesPerson.City, updateSalesPerson.Email,
                    updateSalesPerson.JoiningDate, updateSalesPerson.LastModifiedDateTime, updateSalesPerson.Password, updateSalesPerson.Pincode,
                    updateSalesPerson.SalesPersonBonus, updateSalesPerson.SalesPersonMobile, updateSalesPerson.SalesPersonSalary, updateSalesPerson.SalesPersonTarget);

                    passwordUpdated = true;
                }
            }
            catch (Exception)
            {
                throw;
            }
            return passwordUpdated;
        }
    }
}



