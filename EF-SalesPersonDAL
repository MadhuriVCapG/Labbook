using System;
using System.Collections.Generic;
using System.Linq;


namespace GreatOutdoors.DataAccessLayer
{
    public class SalesPersonDAL
    {
        TeamAEntities entities = new TeamAEntities();
        /// <summary>
        /// Adds new SalesPerson to SalesPersons collection.
        /// </summary>
        /// <param name="newSalesPerson">Contains the SalesPerson details to be added.</param>
        /// <returns>Determinates whether the new SalesPerson is added.</returns>
        public  bool AddSalesPersonDAL(SalesPerson newSalesPerson)
        {
            bool SalesPersonAdded = false;
            try
            {
                newSalesPerson.SalespersonID = Guid.NewGuid();
                newSalesPerson.LastAccountModifiedDateTime = DateTime.Now;
                entities.AddSalesPerson(newSalesPerson.SalespersonID, newSalesPerson.Name, newSalesPerson.Mobile,
                    newSalesPerson.Email, newSalesPerson.Password, newSalesPerson.Salary, newSalesPerson.Bonus, newSalesPerson.Target,
                    newSalesPerson.JoiningDate, newSalesPerson.AddressLine1, newSalesPerson.AddressLine2, newSalesPerson.City,
                    newSalesPerson.State, newSalesPerson.Pincode, newSalesPerson.Birthdate, newSalesPerson.LastAccountModifiedDateTime);
                SalesPersonAdded = true;
            }
            catch (Exception)
            {
                throw;
            }
            return SalesPersonAdded;
        }

        /// <summary>
        /// Gets all SalesPersons from the collection.
        /// </summary>
        /// <returns>Returns list of all SalesPersons.</returns>
        public  List<SalesPerson> GetAllSalesPersonsDAL()
        {
            List<SalesPerson> salesPeople = entities.SalesPersons.ToList();
            return salesPeople;
        }

        /// <summary>
        /// Gets SalesPerson based on SalesPersonID.
        /// </summary>
        /// <param name="searchSalesPersonID">Represents SalesPersonID to search.</param>
        /// <returns>Returns SalesPerson object.</returns>
        public  SalesPerson GetSalesPersonBySalesPersonIDDAL(Guid searchSalesPersonID)
        {
            SalesPerson matchingSalesPerson = new SalesPerson();
            try
            {
                //Find SalesPerson based on searchSalesPersonID
                matchingSalesPerson = entities.GetSalesPersonBySalesPersonID(searchSalesPersonID).ToList()[0];
            }
            catch (Exception)
            {
                throw;
            }
            return matchingSalesPerson;
        }

        /// <summary>
        /// Gets SalesPerson based on SalesPersonName.
        /// </summary>
        /// <param name="SalesPersonName">Represents SalesPersonName to search.</param>
        /// <returns>Returns SalesPerson object.</returns>
        public  List<SalesPerson> GetSalesPersonsByNameDAL(string SalesPersonName)
        {
            List<SalesPerson> matchingSalesPersons = new List<SalesPerson>();
            try
            {
                //Find All SalesPersons based on SalesPersonName
                matchingSalesPersons = entities.GetSalesPersonByName(SalesPersonName).ToList();
            }
            catch (Exception)
            {
                throw;
            }
            return matchingSalesPersons;
        }

        /// <summary>
        /// Gets SalesPerson based on email.
        /// </summary>
        /// <param name="email">Represents SalesPerson's Email Address.</param>
        /// <returns>Returns SalesPerson object.</returns>
        public  SalesPerson GetSalesPersonByEmailDAL(string email)
        {
            SalesPerson matchingSalesPerson = null;
            try
            {
                //Find SalesPerson based on Email and Password
                matchingSalesPerson = entities.GetSalesPersonByEmail(email).ToList()[0];
            }
            catch (Exception)
            {
                throw;
            }
            return matchingSalesPerson;
        }

        /// <summary>
        /// Gets SalesPerson based on Email and Password.
        /// </summary>
        /// <param name="email">Represents SalesPerson's Email Address.</param>
        /// <param name="password">Represents SalesPerson's Password.</param>
        /// <returns>Returns SalesPerson object.</returns>
        public  SalesPerson GetSalesPersonByEmailAndPasswordDAL(string email, string password)
        {
            SalesPerson matchingSalesPerson = null;
            try
            {
                //Find SalesPerson based on Email and Password
                matchingSalesPerson = entities.GetSalesPersonByEmailAndPassword(email,password).ToList()[0];
            }
            catch (Exception)
            {
                throw;
            }
            return matchingSalesPerson;
        }

        /// <summary>
        /// Updates SalesPerson based on SalesPersonID.
        /// </summary>
        /// <param name="updateSalesPerson">Represents SalesPerson details including SalesPersonID, SalesPersonName etc.</param>
        /// <returns>Determinates whether the existing SalesPerson is updated.</returns>
        public  bool UpdateSalesPersonDAL(SalesPerson updateSalesPerson)
        {
            bool salesPersonUpdated = false;
            try
            {
                //Find SalesPerson based on SalesPersonID
                SalesPerson matchingSalesPerson = GetSalesPersonBySalesPersonIDDAL(updateSalesPerson.SalespersonID);

                if (matchingSalesPerson != null)
                {
                    
                    matchingSalesPerson.LastAccountModifiedDateTime = DateTime.Now;
                    entities.UpdateSalesPerson(updateSalesPerson.SalespersonID, updateSalesPerson.Name, updateSalesPerson.Mobile,
                        updateSalesPerson.Email);

                    salesPersonUpdated = true;
                }
            }
            catch (Exception)
            {
                throw;
            }
            return salesPersonUpdated;
        }

        /// <summary>
        /// Deletes SalesPerson based on SalesPersonID.
        /// </summary>
        /// <param name="deleteSalesPersonID">Represents SalesPersonID to delete.</param>
        /// <returns>Determinates whether the existing SalesPerson is updated.</returns>
        public  bool DeleteSalesPersonDAL(Guid deleteSalesPersonID)
        {
            bool SalesPersonDeleted = false;
            try
            {
                //Find SalesPerson based on searchSalesPersonID
                SalesPerson matchingSalesPerson = GetSalesPersonBySalesPersonIDDAL(deleteSalesPersonID);

                if (matchingSalesPerson != null)
                {
                    //Delete SalesPerson from the collection
                    entities.DeleteSalesPerson(deleteSalesPersonID);
                    SalesPersonDeleted = true;
                }
            }
            catch (Exception)
            {
                throw;
            }
            return SalesPersonDeleted;
        }

        /// <summary>
        /// Updates SalesPerson's password based on SalesPersonID.
        /// </summary>
        /// <param name="updateSalesPerson">Represents SalesPerson details including SalesPersonID, Password.</param>
        /// <returns>Determinates whether the existing SalesPerson's password is updated.</returns>
        public  bool UpdateSalesPersonPasswordDAL(SalesPerson updateSalesPerson)
        {
            bool passwordUpdated = false;
            try
            {
                //Find SalesPerson based on SalesPersonID
                SalesPerson matchingSalesPerson = GetSalesPersonBySalesPersonIDDAL(updateSalesPerson.SalespersonID);

                if (matchingSalesPerson != null)
                {
                    //Update SalesPerson details
                    matchingSalesPerson.LastAccountModifiedDateTime = DateTime.Now;
                    entities.UpdateSalesPersonPassword(updateSalesPerson.SalespersonID, updateSalesPerson.Password);

                    passwordUpdated = true;
                }
            }
            catch (Exception)
            {
                throw;
            }
            return passwordUpdated;
        }

    }
}
